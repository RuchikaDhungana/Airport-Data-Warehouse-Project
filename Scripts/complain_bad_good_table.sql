--CREATING BAD DATA TABLE FOR COMPLAINTS TABLE--
truncate table bad_complaints;
DROP table bad_complaints CASCADE CONSTRAINTS;
create table bad_complaints
(
"BAD_ID" NUMBER(*,0) NOT NULL PRIMARY KEY, 
	"COMPLAINTKEY" NUMBER(*,0), 
	"COMPLAINTID" NUMBER(*,0) NOT NULL ENABLE, 
	"COMPLAINTTYPE" VARCHAR2(5), 
	"DESCRIPTION" VARCHAR2(200), 
	"COMPLAINTSTATUS" VARCHAR2(7), 
        "FLIGHT_KEY" INTEGER NOT NULL,
	"DBSOURCE" VARCHAR2(17), 
	"ERROR_DESCRIPTION" VARCHAR2(15), 
	"STATUS" VARCHAR2(10), 
	"RESOLUTION_DATE" DATE	
);
-----------------------------------------------------
--CREATING GOOD DATA TABLE FOR COMPLAINTS TABLE--
truncate table good_complaints;
DROP table good_complaints CASCADE CONSTRAINTS;
create table good_complaints
(
COMPLAINTKEY NUMBER NOT NULL PRIMARY KEY,
COMPLAINTID NUMBER(*,0) NOT NULL ENABLE, 
"COMPLAINTTYPE" VARCHAR2(5), 
"DESCRIPTION" VARCHAR2(200), 
"COMPLAINTSTATUS" VARCHAR2(7), 
"FLIGHT_KEY" INTEGER NOT NULL,
"DBSOURCE" VARCHAR2(17) );
------------------------------------------------------
CREATE SEQUENCE   "BAD_COMPLAINTS_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1
---------------------------------------------------------
--CREATING PROCEDURE FOR BAD AND GOOD COMPLAINTS TABLE DATA QUALIFICATION--

create or replace procedure complaints_data_quality_check (pv_rows OUT NUMBER)
IS
BEGIN
pv_rows := 0;

INSERT INTO bad_complaints
(
SELECT  BAD_COMPLAINTS_SEQ.nextval, STAGE_COMPLAINTS.COMPLAINTKEY, STAGE_COMPLAINTS.COMPLAINTID, STAGE_COMPLAINTS.COMPLAINTTYPE, STAGE_COMPLAINTS.DESCRIPTION, STAGE_COMPLAINTS.COMPLAINTSTATUS, STAGE_COMPLAINTS.FLIGHT_KEY, STAGE_COMPLAINTS.DBSOURCE, 'null values', 'not fixed', sysdate
FROM STAGE_COMPLAINTS
WHERE COMPLAINTTYPE IS NULL
OR DESCRIPTION IS NULL
OR COMPLAINTSTATUS IS NULL);
pv_rows := TO_CHAR(SQL%RowCount);

INSERT INTO bad_complaints
(
SELECT  BAD_COMPLAINTS_SEQ.nextval, STAGE_COMPLAINTS.COMPLAINTKEY, STAGE_COMPLAINTS.COMPLAINTID, STAGE_COMPLAINTS.COMPLAINTTYPE, STAGE_COMPLAINTS.DESCRIPTION, STAGE_COMPLAINTS.COMPLAINTSTATUS, STAGE_COMPLAINTS.FLIGHT_KEY, STAGE_COMPLAINTS.DBSOURCE, 'inconsistent', 'not fixed', sysdate
FROM STAGE_COMPLAINTS
WHERE description ='cancelled' AND COMPLAINTTYPE <>'C'

);
pv_rows := pv_rows + TO_CHAR(SQL%RowCount);

DELETE FROM good_complaints;
INSERT INTO good_complaints 
(
SELECT * FROM STAGE_COMPLAINTS 
WHERE COMPLAINTTYPE IS NOT NULL
AND DESCRIPTION IS NOT NULL
AND COMPLAINTSTATUS IS NOT NULL
AND description ='cancelled' AND COMPLAINTTYPE ='C'
);
END;

--------------------------------------------------------------

--EXECUTE PROCEDURE--
 
DECLARE 
noOfRows NUMBER(5,2);

BEGIN
 complaints_data_quality_check (noOfRows);
DBMS_OUTPUT.PUT_LINE('No of bad data: '||noOfRows);
END;
