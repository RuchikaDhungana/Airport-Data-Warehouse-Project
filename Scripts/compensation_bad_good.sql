--CREATING BAD DATA TABLE FOR COMPLAINTS TABLE--
select * from bad_compensation;
DROP TABLE bad_compensation CASCADE CONSTRAINTS;
CREATE TABLE  "BAD_COMPENSATION" 
   (	"BAD_ID" NUMBER NOT NULL PRIMARY KEY, 
	"COMPENSATIONKEY" NUMBER(*,0) NOT NULL ENABLE, 
	"COMPENSATION_AMNT" VARCHAR2(20), 
	"COMPENSATION_TYPE" VARCHAR2(20), 
        "FLIGHT_KEY" INTEGER NOT NULL,
	"DBSOURCE" VARCHAR2(17), 
	"ERROR_DESCRIPTION" VARCHAR2(15), 
	"STATUS" VARCHAR2(10), 
	"RESOLUTION_DATE" DATE
   );

-------------------------------------------------

--CREATING BAD DATA TABLE FOR COMPLAINTS TABLE--
select * from good_compensation;
DROP TABLE good_compensation CASCADE CONSTRAINTS;
CREATE TABLE  "GOOD_COMPENSATION" 
   (	"COMPENSATIONKEY" NUMBER NOT NULL PRIMARY KEY, 
	"COMPENSATION_AMNT" VARCHAR2(20), 
	"COMPENSATION_TYPE" VARCHAR2(20), 
        "FLIGHT_KEY" INTEGER NOT NULL,
	"DBSOURCE" VARCHAR2(17) 
   );
---------------------------------------------------
CREATE SEQUENCE   "BAD_COMPENSATION_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1;
-------------------------------------------------------

--CREATING PROCEDURE FOR BAD AND GOOD COMPENSATION TABLE DATA QUALIFICATION--

create or replace procedure compensation_data_quality_check (pv_rows OUT NUMBER)
IS
BEGIN
pv_rows := 0;
INSERT INTO bad_compensation
(SELECT BAD_COMPENSATION_SEQ.nextval, STAGE_COMPENSATION.COMPENSATIONKEY, STAGE_COMPENSATION.COMPENSATION_AMNT, STAGE_COMPENSATION.COMPENSATION_TYPE, STAGE_COMPENSATION.FLIGHT_KEY, STAGE_COMPENSATION.DBSOURCE, 'null values', 'not fixed', sysdate
FROM STAGE_COMPENSATION
WHERE COMPENSATION_AMNT IS NULL
OR COMPENSATION_TYPE IS NULL);
pv_rows := TO_CHAR(SQL%RowCount);

INSERT INTO bad_compensation
(SELECT  BAD_COMPENSATION_SEQ.nextval, STAGE_COMPENSATION.COMPENSATIONKEY, STAGE_COMPENSATION.COMPENSATION_AMNT, STAGE_COMPENSATION.COMPENSATION_TYPE, STAGE_COMPENSATION.FLIGHT_KEY, STAGE_COMPENSATION.DBSOURCE, 'inconsistent', 'not fixed', sysdate
FROM STAGE_COMPENSATION
WHERE REGEXP_LIKE (COMPENSATION_TYPE, '^reb(ook)$'));
pv_rows := pv_rows + TO_CHAR(SQL%RowCount);

DELETE FROM good_compensation;
INSERT INTO good_compensation 
(SELECT * FROM STAGE_COMPENSATION
WHERE COMPENSATION_AMNT IS NOT NULL
AND COMPENSATION_TYPE IS NOT NULL
AND NOT REGEXP_LIKE (COMPENSATION_TYPE, '^reb(ook)$'));
END;
-----------------------------------------------------------------

--EXECUTE PROCEDURE--
 
DECLARE 
noOfRows NUMBER(5,2);

BEGIN
 compensation_data_quality_check (noOfRows);
DBMS_OUTPUT.PUT_LINE('No of bad data: '||noOfRows);
END;
------------------------------------------------------------------
